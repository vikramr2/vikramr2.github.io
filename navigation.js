// Content data loaded from JSON files
let contentData = {};

// Function to convert paragraphs array to HTML
function paragraphsToHTML(paragraphs) {
    return paragraphs.map(p => {
        // If paragraph contains HTML tags already (like <b>, <a>, <ul>, <img>, etc.), use as is
        if (p.includes('<') && p.includes('>')) {
            return p;
        }
        // Otherwise, wrap in <p> tag
        return `<p class="card-text">${p}</p>`;
    }).join('\n                    ');
}

// Function to load JSON content for a section
async function loadSectionContent(section) {
    try {
        const response = await fetch(`content/${section}.json`);
        const data = await response.json();

        // Transform the JSON data into the format expected by the existing code
        return {
            cards: data.cards.map(card => {
                let body = '';

                // If there are paragraphs, convert them to HTML
                if (card.paragraphs) {
                    body = paragraphsToHTML(card.paragraphs);
                }

                return {
                    image: card.image,
                    imageAlt: card.imageAlt,
                    imageWidth: card.imageWidth,
                    imageHeight: card.imageHeight,
                    header: card.header,
                    body: body
                };
            })
        };
    } catch (error) {
        console.error(`Error loading content for ${section}:`, error);
        return { cards: [] };
    }
}

// Load all content on initialization
async function loadAllContent() {
    const sections = ['about', 'research', 'projects', 'experience', 'journal'];

    for (const section of sections) {
        contentData[section] = await loadSectionContent(section);
    }
}

// Old hardcoded content data (keeping as backup/reference)
const contentDataOld = {
    about: {
        cards: [
            {
                image: "assets/me.jpeg",
                imageAlt: "Vikram Ramavarapu",
                body: `
                    <p class="card-text"><b>Hey guys!</b></p>
                    <p class="card-text">My name's Vikram. I'm a PhD student in Computer Science at the University of Illinois at Urbana-Champaign.</p>
                    <p class="card-text">My current research interests are quite broad, encompassing a wide spectrum of interdisciplinarity. Central to my focus is the application of network science and its methodologies across various domains such as social science and computational biology. I also have another interest in high-performance and scientific computing. I enjoy using multithreading and parallelism to accelerate computation involved in the aforementioned areas.</p>
                    <p class="card-text"><b>Hobbies and Miscellaneous</b></p>
                    <p class="card-text">I enjoy longboarding. I am also learning how to ride a horse, and I've been pretty consistent with that as well! I speak four languages with varying proficiency: English (I'll leave it up to you to judge), Telugu (my mother tongue), Japanese (I lived in Japan for a while), and Spanish (I took a few classes in college).</p>
                    <p class="card-text"><b>Please reach out!</b></p>
                    <p class="card-text"><a href="mailto:vikramr2@illinois.edu">vikramr2@illinois.edu</a></p>
                `
            }
        ]
    },
    research: {
        cards: [
            {
                image: "assets/citation_rat.png",
                imageAlt: "Citation Rat",
                imageWidth: "400",
                imageHeight: "400",
                body: `
                    <p class="card-text"><b>Scientometrics and Network Science</b></p>
                    <p class="card-text">Currently, under the guidance of Prof. George Chacko and Prof. Tandy Warnow, I am working with large networks of research papers linked through citation. The largest network I have worked with was a citation network of ~75 million nodes and ~1 billion edges (OpenCitations). The specific projects I'm working on are below:
                        <ul>
                            <li>High-performance well-connected community detection (<a href="https://github.com/illinois-or-research-analytics/cm_pipeline">link</a>)</li>
                            <li>Using multi-dimensional metrics to analyze publication impact both at the community and network scale</li>
                            <li>Simulating citation network growth and encoding citation behavior.</li>
                        </ul>
                        <br>
                    </p>
                    <p style="color:white;">.</p>
                    <p class="card-text"><em>Image: A rat made out of citations. Each node is a paper, and each edge is a citation. A lab rat who is merely trying to understand its own behavior.</em></p>
                    <p class="card-text"><em>Image generated by DALL-E</em></p>
                `
            },
            {
                image: "assets/multiling.png",
                imageAlt: "Multilingual Citation Network",
                body: `
                    <p class="card-text"><b>Understanding Community Formation in Science through Cross-lingual Citation</b></p>
                    <p class="card-text">This project was worked on mainly during my time at the National Institute of Informatics (国立情報学研究所) in Tokyo, under the guidance of Prof. Chifumi Nishioka.</p>
                    <p class="card-text">In this project, we explored how cross lingual citation can divide a research citation into communities. Moreover, we explored how messenger nodes across languages can bridge communities. We used a dataset of 7 million papers from a corroborated dataset across OpenCitations, CrossRef, and OpenAlex.</p>
                    <p class="card-text"><em>Image: A visualization of a citation network across languages. Each color represents a different language, and the size of the node represents the number of citations the paper has. NOTE: This is a mockup and not the actual visualization.</em></p>
                `
            },
            {
                image: "assets/migration.jpeg",
                imageAlt: "Migration History",
                imageWidth: "425",
                imageHeight: "325",
                body: `
                    <p class="card-text"><b>Migration History Inference of Metastatic Cancers</b></p>
                    <p class="card-text">I have also been working with Prof. Mohammed El-Kebir on using clonal trees inferred from variant allele frequencies (VAFs) to infer anatomic labelings of nodes in the clonal tree and ultimately a migration graph. Since his paper on <a href="https://github.com/raphael-group/machina">MACHINA</a> in 2018, we have expanded the solution space to return multiple possible migration histories per primary tumor location.</p>
                    <p class="card-text">I created this <a href="https://elkebir-group.github.io/mach2-viz/#/">visualizer</a>. More than simply providing visual aid for the algorithm, it allows users (researchers, oncologists, etc.) to filter through the solution space and enforce priors such as known migrations and/or absences of migrations.</p>
                    <p class="card-text"><em>Image: Migration history inferred for a patient recorded in the <a href="http://tracerx.co.uk/studies/lung/">TracerX</a> consortium.</em></p>
                `
            },
            {
                image: "assets/choropleth.jpeg",
                imageAlt: "COVID Cyclicity",
                imageWidth: "500",
                body: `
                    <p class="card-text"><b>Cyclicity Analysis on COVID in North America</b></p>
                    <p class="card-text">Cyclicity analysis is the technique of aggregating regional linear time series to map spread of a signal over a medium. Cyclicity analysis was traditionally used in neuroscience to infer spread of a signal across the brain given individual synaptic potentials.</p>
                    <p class="card-text">However, we now use Cyclicity Analysis to understand the spread of different variants of COVID. Using American and Canadian provincial COVID case time series, spread is mapped across North America.</p>
                    <p class="card-text"><em>Image: Inferred spread of the Delta variant of COVID. Redder colors indicate earlier states in the wave, and bluer colors indicate later states in the wave.</em></p>
                `
            }
        ]
    },
    projects: {
        cards: [
            {
                header: "MACH2-Viz - An Interactive Visual Tool for Exploring and Studying Cancer Metastasis",
                body: `
                    <p class="card-text">Cancer mostly becomes lethal in the later stages of metastasis. With this in mind, under Prof. Mohammed El-Kebir's group, we introduce MACH2, an improvement over the previous <a href="https://github.com/raphael-group/machina">MACHINA</a> algorithm, that infers metastatic history given a clonal tree and returns a solution space per primary tumor location. I created an interactive visualization tool that allows the user to examine the infered metastatic history solution space for a given patient. The user can also enforce prior knowledge or beliefs on the nature of the patient's cancer, such as known migrations and known absences of migrations. There are also features for visualizing polytomy resolution in the clone tree, comparing solutions, and summarizing the solution space.</p>
                    <img src="assets/mach2viz.jpeg" alt="Card image" width="600"><br>
                    <a href="https://elkebir-group.github.io/mach2-viz/#/" class="btn btn-primary">Open Application</a>
                `
            },
            {
                header: "CM++ - A Pipeline Software for Well-Connected Community Detection",
                body: `
                    <p class="card-text">Community detection is the process of partitioning a very large graph into smaller "meso-scale" subgraphs. The definition of a "good" community is very amorphous. As such we created a generalizable community detection pipeline that allows users to switch between stages of operations (community detection with their specified algorithm, size filtering, tree filtering, statistics computation). We also created a stage in the pipeline that "chisels" computed communities into well-connected communities (illustrated below) through pruning and mincuts. This software was created within <a href="http://tandy.cs.illinois.edu/bibliometrics.html">Prof. George Chacko and Prof. Tandy Warnow's</a> group.</p>
                    <img src="assets/cm_process.jpeg" alt="Card image" width="500"><br>
                    <a href="https://illinois-or-research-analytics.github.io/cm_pipeline/" class="btn btn-primary">Go to Docs Page!</a>
                    <a href="https://github.com/illinois-or-research-analytics/cm_pipeline" class="btn btn-primary">View Source Code!</a>
                `
            },
            {
                header: "Voice-Activated Digital Home Assistant Application/Skill Development: Instructional Support and Recommendation Application Development for Older Adults with Mobility Disabilities",
                body: `
                    <p class="card-text">This project is under the Human Factors and Aging Laboratory at the University of Illinois and TechSAge at Georgia Tech. I developed an Alexa application that delivers instructional material and curation of other Alexa apps and functionalities to older adults and those living with mobility disabilities. The application follows heuristics such as recognition vs. recall, error handling, etc. so that those unfamiliar with technology can easily use this voice based app.</p>
                    <img src="assets/reco.jpeg" alt="Card image" width="500">
                    <br>
                    <a href="https://techsage.gatech.edu/development/d4" class="btn btn-primary">Go to Project Page!</a>
                    <a href="https://github.com/vikramr2/HelpRecoSkill" class="btn btn-primary">View Source Code!</a>
                `
            }
        ]
    },
    experience: {
        cards: [
            {
                header: "To see all of my experience",
                body: `
                    <p class="card-text">Download my <a href="assets/Vikram_CV_9_2024.pdf" download class="nav-link-typewriter">CV</a></p>
                `
            }
        ]
    },
    journal: {
        cards: [
            {
                header: "Recursion on a Trash Can",
                body: `
                    <p class="card-text"><b>8/25/2022</b></p>
                    <p class="card-text">If you want to replace a trash can, you need to throw away the old trash can right?</p>
                    <p class="card-text">So where do you throw away the trash can if you intend to throw away the trash can you're trying to throw away the trash can in?</p>
                    <p class="card-text">I guess you can get the new trash can and throw away the old trash can in the new trash can...</p>
                    <p class="card-text">Yeah that works...</p>
                    <p class="card-text"><b>#ViksJournal</b></p>
                `
            },
            {
                header: "Happiness and my iPhone",
                body: `
                    <p class="card-text"><b>12/24/2021</b></p>
                    <p class="card-text">Let's analogize general happiness with the battery life of my phone. Because I use an iPhone, that happiness level switches a lot throughout the day. Just like a charger, there are things in life that bring that battery percentage up, and if theres no "charger" currently available, it'll naturally fall down.</p>
                    <p class="card-text">But here's the thing: how much does that battery NEED to be 100%? Mankind wasn't guaranteed 100% happiness ~ 100% battery. This is where the slight fallacy occurs. If you're happy 100% of the time, you're a sociopath... so in order to keep a healthy balance,</p>
                    <p class="card-text"><em>I am never charging my phone to 100%</em></p>
                    <p class="card-text"><b>#ViksJournal</b></p>
                `
            }
        ]
    }
};

// Current state
let currentSection = 'about';
let currentCardIndex = 0;

// Default title text for each section
const sectionTitles = {
    'about': 'Vikram R.',
    'research': 'My Research',
    'projects': 'My showcase!',
    'experience': 'Work experience',
    'journal': 'Random thoughts n stuff'
};

// Function to get the current default title
function getCurrentDefaultTitle() {
    return sectionTitles[currentSection] || 'Vikram R.';
}

// Make it globally accessible
window.getCurrentDefaultTitle = getCurrentDefaultTitle;

// Also expose currentSection for debugging
window.getCurrentSection = function() { return currentSection; };

// Render a single card
function renderCard(card, isAboutStyle = false) {
    if (isAboutStyle) {
        return `
            <div class="card mb-3 about about-home">
                <img src="${card.image}" class="card-img-top" alt="${card.imageAlt}" ${card.imageWidth ? `width="${card.imageWidth}"` : ''} ${card.imageHeight ? `height="${card.imageHeight}"` : ''}>
                <div class="card-body">
                    ${card.body}
                </div>
            </div>
        `;
    } else {
        return `
            <div class="card">
                ${card.header ? `<h5 class="card-header">${card.header}</h5>` : ''}
                <div class="card-body">
                    ${card.body}
                </div>
            </div>
        `;
    }
}

// Load content for a section
function loadSection(section, skipAnimation = false) {
    currentSection = section;
    currentCardIndex = 0;

    const container = document.querySelector('.card-container-home');
    const data = contentData[section];

    if (!data) return;

    // Update the title to the section's default text
    const titleElement = document.getElementById('title');
    if (titleElement) {
        titleElement.innerHTML = getCurrentDefaultTitle();
    }

    const isAboutStyle = (section === 'about' || section === 'research');
    const hasMultipleCards = data.cards.length > 1;

    // Add or remove carousel class
    if (hasMultipleCards) {
        container.classList.add('has-carousel');
    } else {
        container.classList.remove('has-carousel');
    }

    // Clear and render
    container.innerHTML = renderCard(data.cards[0], isAboutStyle);

    // Add carousel controls if multiple cards
    if (hasMultipleCards) {
        const carouselControls = document.createElement('div');
        carouselControls.className = 'carousel-controls';
        carouselControls.innerHTML = `
            <button class="carousel-btn carousel-prev" onclick="navigateCard(-1)">&#10094; Previous</button>
            <span class="carousel-indicator">${currentCardIndex + 1} / ${data.cards.length}</span>
            <button class="carousel-btn carousel-next" onclick="navigateCard(1)">Next &#10095;</button>
        `;
        container.appendChild(carouselControls);
    }

    // Only trigger fade-in animation if not initial load (CSS handles initial load)
    if (!skipAnimation) {
        container.style.opacity = '0';
        setTimeout(() => {
            container.style.opacity = '1';
        }, 50);
    }
}

// Navigate between cards
function navigateCard(direction) {
    const data = contentData[currentSection];
    if (!data) return;

    currentCardIndex += direction;

    // Wrap around
    if (currentCardIndex < 0) currentCardIndex = data.cards.length - 1;
    if (currentCardIndex >= data.cards.length) currentCardIndex = 0;

    const container = document.querySelector('.card-container-home');
    const isAboutStyle = (currentSection === 'about' || currentSection === 'research');
    const card = data.cards[currentCardIndex];

    // Fade out
    container.style.opacity = '0';

    setTimeout(() => {
        // Update card content
        const cardHTML = renderCard(card, isAboutStyle);
        const carouselControls = `
            <div class="carousel-controls">
                <button class="carousel-btn carousel-prev" onclick="navigateCard(-1)">&#10094; Previous</button>
                <span class="carousel-indicator">${currentCardIndex + 1} / ${data.cards.length}</span>
                <button class="carousel-btn carousel-next" onclick="navigateCard(1)">Next &#10095;</button>
            </div>
        `;
        container.innerHTML = cardHTML + carouselControls;

        // Fade in
        setTimeout(() => {
            container.style.opacity = '1';
        }, 50);
    }, 300);
}

// Initialize navigation
async function initNavigation() {
    // Load all content from JSON files first
    await loadAllContent();

    const navLinks = {
        'about': document.getElementById('about'),
        'research': document.getElementById('research'),
        'projects': document.getElementById('projects'),
        'experience': document.getElementById('experience'),
        'journal': document.getElementById('journal')
    };

    Object.keys(navLinks).forEach(section => {
        const link = navLinks[section];
        if (link) {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                loadSection(section);
            });
        }
    });

    // Load the about section on initial page load (skip animation since CSS handles it)
    loadSection('about', true);
}

// Load on page ready
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initNavigation);
} else {
    initNavigation();
}
